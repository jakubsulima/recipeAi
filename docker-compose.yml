services:
  backend:
    build:
      context: ./backendApi
      dockerfile: Dockerfile
    # PORTS REMOVED - Nginx will handle traffic
    environment:
      SPRING_PROFILES_ACTIVE: "docker"
      POSTGRES_URL: "jdbc:postgresql://db:5432/${POSTGRES_DB}"
      GEMINI_API_KEY: "${GEMINI_API_KEY}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      # IMPORTANT: Update this on your server to your domain
      ALLOWED_ORIGINS: "${ALLOWED_ORIGINS}"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "timeout 10s bash -c '</dev/tcp/localhost/8080' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - recipe-net

  frontend:
    build:
      context: ./frontend/recipeai
      dockerfile: Dockerfile
    # PORTS REMOVED - Nginx will handle traffic
    environment:
      # This now points to the Nginx proxy
      BACKEND_URL: "${BACKEND_URL}"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - recipe-net

  db:
    build:
      context: ./postgres
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "5434:5432" # You can keep this for external DB access or remove it
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - recipe-net

  # --- NEW NGINX SERVICE ---
  nginx:
    image: nginx:latest
    container_name: recipeai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount the Nginx config, Let's Encrypt certs, and challenge files
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - recipe-net
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy

  # --- NEW CERTBOT SERVICE ---
  certbot:
    image: certbot/certbot
    container_name: recipeai-certbot
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

volumes:
  postgres_data:

networks:
  recipe-net:
    driver: bridge
